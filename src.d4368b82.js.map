{"version":3,"sources":["js/markup.js","index.js"],"names":["createMarkup","selector","CountdownTimer","constructor","targetDate","clearInterval","intervalId","console","log","getTimeComponents","updateInterface","document","body","insertAdjacentHTML","container","getElementById","start","addListenersBtns","setInterval","currentDate","Date","now","deltaTime","time","days","hours","mins","secs","querySelector","textContent","addEventListener","stop","continueBtn","pad","Math","floor","value","String","padStart","timer","timerOne"],"mappings":";;;AAyBC,aAzBc,SAASA,EAAaC,GAC3B,gCAAyBA,8qBAwBlC,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,QAAA;;AC8DD,aAvFA,QAAA,oBAEA,IAAA,EAAA,EAAA,QAAA,gBAqFA,SAAA,EAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,GAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,KAAA,EAAA,OAAA,eAAA,EAAA,EAAA,CAAA,MAAA,EAAA,YAAA,EAAA,cAAA,EAAA,UAAA,IAAA,EAAA,GAAA,EAAA,EAnFA,MAAMC,EACFC,aAAY,SAAEF,EAAF,WAAYG,IAkDjB,EAAA,KAAA,OAAA,KACHC,cAAc,KAAKC,YACnBC,QAAQC,IAAI,cACQ,KAAKC,kBAAkB,GACtCC,KAAAA,gBAAgB,KAAKD,kBAAkB,MArDvCH,KAAAA,WAAa,KACbL,KAAAA,SAAWA,EACXG,KAAAA,WAAaA,EAElBO,SAASC,KAAKC,mBAAmB,aAAa,EAAaZ,EAAAA,SAAAA,IACtDa,KAAAA,UAAYH,SAASI,eAAed,GACzCM,QAAQC,IAAI,KAAKM,WACZE,KAAAA,QACAC,KAAAA,mBAcPD,QACOV,KAAAA,WAAaY,YAAY,KACpBC,MAAAA,EAAcC,KAAKC,MACnBC,EAAY,KAAKlB,WAAae,EAC9BI,EAAO,KAAKd,kBAAkBa,GACpCf,QAAQC,IAAK,SAERE,KAAAA,gBAAgBa,IACtB,KAGPb,iBAAgB,KAAEc,EAAF,MAAQC,EAAR,KAAeC,EAAf,KAAqBC,IACxBb,KAAAA,UAAUc,cAAc,uBAAuBC,YAAcL,EAC7DV,KAAAA,UAAUc,cAAc,wBAAwBC,YAAcJ,EAC9DX,KAAAA,UAAUc,cAAc,uBAAuBC,YAAcH,EAC7DZ,KAAAA,UAAUc,cAAc,uBAAuBC,YAAcF,EAG1EV,mBACSH,KAAAA,UAAUc,cAAe,sBAAsBE,iBAAiB,QAAS,KAAKC,MAC7EC,MAAAA,EAAc,KAAKlB,UAAUc,cAAc,0BAEjDrB,QAAQC,IAAIwB,GAEZA,EAAYF,iBAAiB,QAAS,KAAKd,OAiB/CP,kBAAkBc,GAKX,MAAA,CAAEC,KAJI,KAAKS,IAAIC,KAAKC,MAAMZ,EAAQ,QAI1BE,MAHD,KAAKQ,IAAIC,KAAKC,MAAOZ,EAAQ,MAAyB,OAG9CG,KAFT,KAAKO,IAAIC,KAAKC,MAAOZ,EAAQ,KAAoB,MAElCI,KADf,KAAKM,IAAIC,KAAKC,MAAOZ,EAAQ,IAAc,OAIxDU,IAAIG,GACGC,OAAAA,OAAOD,GAAOE,SAAS,EAAG,MAIrC,MAAMC,EAAQ,IAAIrC,EAAe,CAC/BD,SAAU,WACRG,WAAY,IAAIgB,KAAK,kBAGnBoB,EAAW,IAAItC,EAAe,CAC/BD,SAAU,WACXG,WAAY,IAAIgB,KAAK","file":"src.d4368b82.js","sourceRoot":"../src","sourcesContent":["export default function createMarkup(selector) {\n  return `<div class=\"timer\" id=\"${selector}\">\n  <div class=\"field\">\n    <span class=\"value\" data-value=\"days\">11</span>\n    <span class=\"label\">Days</span>\n  </div>\n\n  <div class=\"field\">\n    <span class=\"value\" data-value=\"hours\">11</span>\n    <span class=\"label\">Hours</span>\n  </div>\n\n  <div class=\"field\">\n    <span class=\"value\" data-value=\"mins\">11</span>\n    <span class=\"label\">Minutes</span>\n  </div>\n\n  <div class=\"field\">\n    <span class=\"value\" data-value=\"secs\">11</span>\n    <span class=\"label\">Seconds</span>\n  </div>\n  <button class=\"timer-btn stop \" data-action-stop>Остановить отсчет</button>\n    <button class=\"timer-btn start\" data-action-continue>Продолжить отсчет</button>\n</div>\n`\n}","import './sass/main.scss';\n\nimport createMarkup from './js/markup';\n\nclass CountdownTimer {\n    constructor({ selector, targetDate }) {\n        this.intervalId = null;\n        this.selector = selector;\n        this.targetDate = targetDate;\n       \n        document.body.insertAdjacentHTML('beforeend', createMarkup(selector));\n        this.container = document.getElementById(selector);\n        console.log(this.container)\n        this.start();\n        this.addListenersBtns();            \n    };\n    \n    // start = () => {\n    //     this.intervalId = setInterval(() => {\n    //         const currentDate = Date.now();\n    //         const deltaTime = this.targetDate - currentDate;\n    //         const time = this.getTimeComponents(deltaTime);\n    //         console.log(`start`);\n    \n    //         this.updateInterface(time)\n    //     }, 1000); \n    // }; \n\n      start(){\n        this.intervalId = setInterval(() => {\n            const currentDate = Date.now();\n            const deltaTime = this.targetDate - currentDate;\n            const time = this.getTimeComponents(deltaTime);\n            console.log(`start`);\n    \n            this.updateInterface(time)\n        }, 1000); \n    }; \n\n    updateInterface({ days, hours, mins, secs }) {\n            this.container.querySelector('[data-value=\"days\"]').textContent = days;\n            this.container.querySelector('[data-value=\"hours\"]').textContent = hours;\n            this.container.querySelector('[data-value=\"mins\"]').textContent = mins;\n            this.container.querySelector('[data-value=\"secs\"]').textContent = secs;\n    };\n\n    addListenersBtns() {\n        this.container.querySelector( '[data-action-stop]').addEventListener('click', this.stop);\n        const continueBtn = this.container.querySelector('[data-action-continue]');\n        // console.log(stopBtn);\n        console.log(continueBtn);\n        // stopBtn.addEventListener('click', this.stop);\n        continueBtn.addEventListener('click', this.start);\n    };\n\n    stop = () => {\n        clearInterval(this.intervalId);\n        console.log(\"Остановить\");\n        const timeToCount = this.getTimeComponents(0);\n        this.updateInterface(this.getTimeComponents(0));    \n    };\n\n\n//     stop = () => {\n//     clearInterval(this.intervalId);\n//     const timeToCount = this.getTimeComponents(0);\n//     console.log('Остановить');\n//   };\n    \n    getTimeComponents(time) {\n    const days = this.pad(Math.floor(time / (1000 * 60 * 60 * 24)));\n    const hours = this.pad(Math.floor((time % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)));\n    const mins = this.pad(Math.floor((time % (1000 * 60 * 60)) / (1000 * 60)));\n    const secs = this.pad(Math.floor((time % (1000 * 60)) / 1000));\n    return { days, hours, mins, secs };\n    };\n\n    pad(value) {\n    return String(value).padStart(2, '0');\n    };\n}\n\nconst timer = new CountdownTimer({\n  selector: '#timer-1',\n    targetDate: new Date('Oct 26, 2021'),\n});\n\nconst timerOne = new CountdownTimer({\n     selector: '#timer-2',\n    targetDate: new Date('Nov 26, 2021'),\n})\n"]}