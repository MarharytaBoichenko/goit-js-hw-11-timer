{"version":3,"sources":["js/markup.js","index.js"],"names":["createMarkup","body","document","querySelector","markup","insertAdjacentHTML","refs","day","hour","min","sec","stopBtn","continueBtn","console","log","CountdownTimer","constructor","selector","targetDate","onTickTimer","intervalId","start","setInterval","currentDate","deltaTime","Date","now","timeToCount","getTimeComponents","stop","clearInterval","time","days","pad","Math","floor","hours","mins","secs","value","String","padStart","timer","updateInterface","textContent","addEventListener","bind"],"mappings":";;;AAsBC,aAtBgB,SAASA,IACd,MAAA,qiBAqBX,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,QAAA;;ACqDD,aA3EA,QAAA,oBACA,IAAA,EAAA,EAAA,QAAA,mBA0EA,SAAA,EAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,GAtEA,MAAMC,EAAOC,SAASC,cAAc,QAE9BC,GAAS,EAAf,EAAA,WACAH,EAAKI,mBAAmB,aAAcD,GAEtC,MAAME,EAAO,CACTC,IAAKL,SAASC,cAAc,uBAC5BK,KAAMN,SAASC,cAAc,wBAC7BM,IAAKP,SAASC,cAAc,uBAC5BO,IAAKR,SAASC,cAAc,uBAC5BQ,QAAST,SAASC,cAAc,sBAChCS,YAAaV,SAASC,cAAc,4BAGlC,IAAEI,EAAF,KAAOC,EAAP,IAAaC,EAAb,IAAkBC,EAAlB,QAAuBC,EAAvB,YAAgCC,GAAgBN,EACtDO,QAAQC,IAAIP,GAEZ,MAAMQ,EACFC,aAAY,SAAEC,EAAF,WAAYC,EAAZ,YAAwBC,IAC3BC,KAAAA,WAAa,KACbH,KAAAA,SAAWA,EACXC,KAAAA,WAAaA,EACbC,KAAAA,YAAcA,EAGvBE,QACSD,KAAAA,WAAaE,YAAY,KACpBC,MACAC,IADcC,KAAKC,MACU,KAAKR,YAClCS,EAAc,KAAKC,kBAAkBJ,GACtCL,KAAAA,YAAYQ,IAClB,KAGPE,OACIC,cAAc,KAAKV,YACbO,MAAAA,EAAc,KAAKC,kBAAkB,GACtCT,KAAAA,YAAYQ,GACjBd,QAAQC,IAAI,cAGhBc,kBAAkBG,GAKP,MAAA,CAAEC,KAJI,KAAKC,IAAIC,KAAKC,MAAMJ,EAAQ,QAI1BK,MAHD,KAAKH,IAAIC,KAAKC,MAAOJ,EAAQ,MAAyB,OAG9CM,KAFT,KAAKJ,IAAIC,KAAKC,MAAOJ,EAAQ,KAAoB,MAElCO,KADf,KAAKL,IAAIC,KAAKC,MAAOJ,EAAQ,IAAc,OAI5DE,IAAIM,GACGC,OAAAA,OAAOD,GAAOE,SAAS,EAAG,MAIrC,MAAMC,EAAQ,IAAI3B,EAAe,CAC/BE,SAAU,WACRC,WAAY,IAAIO,KAAK,gBACvBN,YAAawB,IAKf,SAASA,GAAgB,KAAEX,EAAF,MAAQI,EAAR,KAAeC,EAAf,KAAqBC,IAC9C/B,EAAIqC,YAAcZ,EAClBxB,EAAKoC,YAAcR,EACnB3B,EAAImC,YAAcP,EAClB3B,EAAIkC,YAAcN,EANlBI,EAAMrB,QASNV,EAAQkC,iBAAiB,QAASH,EAAMb,KAAKiB,KAAKJ,IAClD9B,EAAYiC,iBAAiB,QAASH,EAAMrB,MAAMyB,KAAKJ","file":"src.7885d917.js","sourceRoot":"../src","sourcesContent":["export  default  function createMarkup(){\n    return `<div class=\"timer\" id=\"timer-1\">\n  <div class=\"field\">\n    <span class=\"value\" data-value=\"days\">11</span>\n    <span class=\"label\">Days</span>\n  </div>\n\n  <div class=\"field\">\n    <span class=\"value\" data-value=\"hours\">11</span>\n    <span class=\"label\">Hours</span>\n  </div>\n\n  <div class=\"field\">\n    <span class=\"value\" data-value=\"mins\">11</span>\n    <span class=\"label\">Minutes</span>\n  </div>\n\n  <div class=\"field\">\n    <span class=\"value\" data-value=\"secs\">11</span>\n    <span class=\"label\">Seconds</span>\n  </div>\n</div>`\n}","import './sass/main.scss';\nimport createMarkup from \"./js/markup.js\";\n// import { refs } from \"./js/refs.js\";\n// const { day, hour, min, sec, stopBtn, continueBtn } = refs;\n// console.log(refs.day);\nconst body = document.querySelector('body');\n\nconst markup = createMarkup();    \nbody.insertAdjacentHTML('afterbegin', markup);\n\nconst refs = {\n    day: document.querySelector('[data-value=\"days\"]'),\n    hour: document.querySelector('[data-value=\"hours\"]'),\n    min: document.querySelector('[data-value=\"mins\"]'),\n    sec: document.querySelector('[data-value=\"secs\"]'),\n    stopBtn: document.querySelector('[data-action-stop]'),\n    continueBtn: document.querySelector('[data-action-continue]'),\n};\n\nconst { day, hour, min, sec, stopBtn, continueBtn } = refs;\nconsole.log(day);\n\nclass CountdownTimer {\n    constructor({ selector, targetDate, onTickTimer }) {\n        this.intervalId = null;\n        this.selector = selector;\n        this.targetDate = targetDate;\n        this.onTickTimer = onTickTimer;\n    }\n   \n    start() {\n        this.intervalId = setInterval(() => {\n            const currentDate = Date.now();\n            const deltaTime = - (currentDate - this.targetDate);\n            const timeToCount = this.getTimeComponents(deltaTime);\n            this.onTickTimer(timeToCount);\n        }, 1000);  \n    }\n\n    stop() {\n        clearInterval(this.intervalId);\n        const timeToCount = this.getTimeComponents(0);\n        this.onTickTimer(timeToCount);\n        console.log(\"Остановить\");\n    }\n    \n    getTimeComponents(time) {\n        const days = this.pad(Math.floor(time / (1000 * 60 * 60 * 24)));\n        const hours = this.pad(Math.floor((time % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)));\n        const mins = this.pad(Math.floor((time % (1000 * 60 * 60)) / (1000 * 60)));\n        const secs = this.pad(Math.floor((time % (1000 * 60)) / 1000));\n        return { days, hours, mins, secs };\n    };\n\n    pad(value) {\n    return String(value).padStart(2, '0');\n  }\n}\n\nconst timer = new CountdownTimer({\n  selector: '#timer-1',\n    targetDate: new Date('Oct 26, 2021'),\n  onTickTimer: updateInterface,\n});\n\ntimer.start();\n\nfunction updateInterface({ days, hours, mins, secs }) {\nday.textContent = days;\nhour.textContent = hours;\nmin.textContent = mins;\nsec.textContent = secs;\n};\n\nstopBtn.addEventListener('click', timer.stop.bind(timer));\ncontinueBtn.addEventListener('click', timer.start.bind(timer));"]}