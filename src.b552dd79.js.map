{"version":3,"sources":["js/markup.js","index.js"],"names":["createMarkup","body","document","querySelector","console","log","markup","insertAdjacentHTML","refs","days","hours","mins","secs","stopBtn","CountdownTimer","constructor","selector","targetDate","onTickTimer","intervalId","start","setInterval","currentDate","deltaTime","Date","now","timeToCount","getTimeComponents","stop","clearInterval","time","Math","floor","timer","updateInterface","textContent","addEventListener","bind"],"mappings":";;;AAsBC,aAtBgB,SAASA,IACd,MAAA,qiBAqBX,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,QAAA;;AC2CD,aAjEA,QAAA,oBACA,IAAA,EAAA,EAAA,QAAA,mBAgEA,SAAA,EAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,GA9DA,MAAMC,EAAOC,SAASC,cAAc,QACpCC,QAAQC,IAAIJ,GAEZ,MAAMK,GAAS,EAAf,EAAA,WACAL,EAAKM,mBAAmB,aAAcD,GAEtC,MAAME,EAAO,CACTC,KAAMP,SAASC,cAAc,uBAC7BO,MAAOR,SAASC,cAAc,wBAC9BQ,KAAMT,SAASC,cAAc,uBAC7BS,KAAMV,SAASC,cAAc,uBAC7BU,QAASX,SAASC,cAAc,uBAGpC,MAAMW,EACFC,aAAY,SAAEC,EAAF,WAAYC,EAAZ,YAAwBC,IAC3BC,KAAAA,WAAa,KACbH,KAAAA,SAAWA,EACXC,KAAAA,WAAaA,EACbC,KAAAA,YAAcA,EAGvBE,QACSD,KAAAA,WAAaE,YAAY,KACpBC,MACAC,IADcC,KAAKC,MACU,KAAKR,YAClCS,EAAc,KAAKC,kBAAkBJ,GACtCL,KAAAA,YAAYQ,IAClB,KAGPE,OACIC,cAAc,KAAKV,YACbO,MAAAA,EAAc,KAAKC,kBAAkB,GACtCT,KAAAA,YAAYQ,GACjBtB,QAAQC,IAAI,cAGhBsB,kBAAkBG,GAKP,MAAA,CAAErB,KAJIsB,KAAKC,MAAMF,EAAQ,OAIjBpB,MAHDqB,KAAKC,MAAOF,EAAQ,MAAyB,MAGrCnB,KAFToB,KAAKC,MAAOF,EAAQ,KAAoB,KAEzBlB,KADfmB,KAAKC,MAAOF,EAAQ,IAAc,OAKvD,MAAMG,EAAQ,IAAInB,EAAe,CAC/BE,SAAU,WACRC,WAAY,IAAIO,KAAK,gBACvBN,YAAagB,IAKf,SAASA,GAAgB,KAAEzB,EAAF,MAAQC,EAAR,KAAeC,EAAf,KAAqBC,IAC1CJ,EAAKC,KAAK0B,YAAc1B,EACxBD,EAAKE,MAAMyB,YAAczB,EACzBF,EAAKG,KAAKwB,YAAcxB,EACxBH,EAAKI,KAAKuB,YAAcvB,EAN5BqB,EAAMb,QASNZ,EAAKK,QAAQuB,iBAAiB,QAASH,EAAML,KAAKS,KAAKJ","file":"src.b552dd79.js","sourceRoot":"../src","sourcesContent":["export  default  function createMarkup(){\n    return `<div class=\"timer\" id=\"timer-1\">\n  <div class=\"field\">\n    <span class=\"value\" data-value=\"days\">11</span>\n    <span class=\"label\">Days</span>\n  </div>\n\n  <div class=\"field\">\n    <span class=\"value\" data-value=\"hours\">11</span>\n    <span class=\"label\">Hours</span>\n  </div>\n\n  <div class=\"field\">\n    <span class=\"value\" data-value=\"mins\">11</span>\n    <span class=\"label\">Minutes</span>\n  </div>\n\n  <div class=\"field\">\n    <span class=\"value\" data-value=\"secs\">11</span>\n    <span class=\"label\">Seconds</span>\n  </div>\n</div>`\n}","import './sass/main.scss';\nimport createMarkup from \"./js/markup.js\";\n\nconst body = document.querySelector('body');\nconsole.log(body);\n\nconst markup = createMarkup();    \nbody.insertAdjacentHTML('afterbegin', markup);\n\nconst refs = {\n    days: document.querySelector('[data-value=\"days\"]'),\n    hours: document.querySelector('[data-value=\"hours\"]'),\n    mins: document.querySelector('[data-value=\"mins\"]'),\n    secs: document.querySelector('[data-value=\"secs\"]'),\n    stopBtn: document.querySelector('[data-action-stop]')\n}\n\nclass CountdownTimer {\n    constructor({ selector, targetDate, onTickTimer }) {\n        this.intervalId = null;\n        this.selector = selector;\n        this.targetDate = targetDate;\n        this.onTickTimer = onTickTimer;\n    }\n    \n    start() {\n        this.intervalId = setInterval(() => {\n            const currentDate = Date.now();\n            const deltaTime = - (currentDate - this.targetDate);\n            const timeToCount = this.getTimeComponents(deltaTime);\n            this.onTickTimer(timeToCount);\n        }, 1000);  \n    }\n\n    stop() {\n        clearInterval(this.intervalId);\n        const timeToCount = this.getTimeComponents(0);\n        this.onTickTimer(timeToCount);\n        console.log(\"Остановить\");\n    }\n    \n    getTimeComponents(time) {\n        const days = Math.floor(time / (1000 * 60 * 60 * 24));\n        const hours = Math.floor((time % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));\n        const mins = Math.floor((time % (1000 * 60 * 60)) / (1000 * 60));\n        const secs = Math.floor((time % (1000 * 60)) / 1000);\n        return { days, hours, mins, secs };\n    };\n}\n\nconst timer = new CountdownTimer({\n  selector: '#timer-1',\n    targetDate: new Date('Oct 26, 2021'),\n  onTickTimer: updateInterface,\n});\n\ntimer.start();\n\nfunction updateInterface({ days, hours, mins, secs }) {\n    refs.days.textContent = days;\n    refs.hours.textContent = hours;\n    refs.mins.textContent = mins;\n    refs.secs.textContent = secs;\n};\n\nrefs.stopBtn.addEventListener('click', timer.stop.bind(timer));"]}