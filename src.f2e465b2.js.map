{"version":3,"sources":["js/markup.js","index.js"],"names":["createMarkup","selector","CountdownTimer","constructor","targetDate","intervalId","document","body","insertAdjacentHTML","container","getElementById","console","log","start","addListenersBtns","setInterval","currentDate","Date","now","deltaTime","time","getTimeComponents","updateInterface","stopBtn","querySelector","continueBtn","addEventListener","stop","bind","days","hours","mins","secs","textContent","clearInterval","pad","Math","floor","value","String","padStart","timer","timerOne"],"mappings":";;;AAyBC,aAzBc,SAASA,EAAaC,GAC3B,gCAAyBA,grBAwBlC,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,QAAA;;AC0CD,aAnEA,QAAA,oBAEA,IAAA,EAAA,EAAA,QAAA,gBAiEA,SAAA,EAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,GA/DA,MAAMC,EACFC,aAAY,SAAEF,EAAF,WAAYG,IACfC,KAAAA,WAAa,KACbJ,KAAAA,SAAWA,EACXG,KAAAA,WAAaA,EAElBE,SAASC,KAAKC,mBAAmB,cAAc,EAAaP,EAAAA,SAAAA,IACvDQ,KAAAA,UAAYH,SAASI,eAAeT,GACzCU,QAAQC,IAAI,KAAKH,WACZI,KAAAA,QACAC,KAAAA,mBAGPD,QACOR,KAAAA,WAAaU,YAAY,KACpBC,MAAAA,EAAcC,KAAKC,MACnBC,EAAY,KAAKf,WAAaY,EAC9BI,EAAO,KAAKC,kBAAkBF,GACpCR,QAAQC,IAAK,SAERU,KAAAA,gBAAgBF,IACtB,KAGNN,mBACSS,MAAAA,EAAU,KAAKd,UAAUe,cAAc,sBACvCC,EAAc,KAAKhB,UAAUe,cAAc,0BACjDD,EAAQG,iBAAiB,QAAS,KAAKC,KAAKC,KAAK,OACjDH,EAAYC,iBAAiB,QAAS,KAAKb,MAAMe,KAAK,OAG1DN,iBAAgB,KAAEO,EAAF,MAAQC,EAAR,KAAeC,EAAf,KAAqBC,IACxBvB,KAAAA,UAAUe,cAAc,uBAAuBS,YAAcJ,EAC7DpB,KAAAA,UAAUe,cAAc,wBAAwBS,YAAcH,EAC9DrB,KAAAA,UAAUe,cAAc,uBAAuBS,YAAcF,EAC7DtB,KAAAA,UAAUe,cAAc,uBAAuBS,YAAcD,EAG1EL,OACIO,cAAc,KAAK7B,YACnBM,QAAQC,IAAI,cACQ,KAAKS,kBAAkB,GACtCC,KAAAA,gBAAgB,KAAKD,kBAAkB,IAGhDA,kBAAkBD,GAKX,MAAA,CAAES,KAJI,KAAKM,IAAIC,KAAKC,MAAMjB,EAAQ,QAI1BU,MAHD,KAAKK,IAAIC,KAAKC,MAAOjB,EAAQ,MAAyB,OAG9CW,KAFT,KAAKI,IAAIC,KAAKC,MAAOjB,EAAQ,KAAoB,MAElCY,KADf,KAAKG,IAAIC,KAAKC,MAAOjB,EAAQ,IAAc,OAIxDe,IAAIG,GACGC,OAAAA,OAAOD,GAAOE,SAAS,EAAG,MAIrC,MAAMC,EAAQ,IAAIvC,EAAe,CAC/BD,SAAU,WACRG,WAAY,IAAIa,KAAK,kBAGnByB,EAAW,IAAIxC,EAAe,CAC/BD,SAAU,WACXG,WAAY,IAAIa,KAAK","file":"src.f2e465b2.js","sourceRoot":"../src","sourcesContent":["export default function createMarkup(selector) {\n  return `<div class=\"timer\" id=\"${selector}\">\n    <button class=\"timer-btn stop \" data-action-stop>Остановить отсчет</button>\n  <div class=\"field\">\n    <span class=\"value\" data-value=\"days\">11</span>\n    <span class=\"label\">Days</span>\n  </div>\n\n  <div class=\"field\">\n    <span class=\"value\" data-value=\"hours\">11</span>\n    <span class=\"label\">Hours</span>\n  </div>\n\n  <div class=\"field\">\n    <span class=\"value\" data-value=\"mins\">11</span>\n    <span class=\"label\">Minutes</span>\n  </div>\n\n  <div class=\"field\">\n    <span class=\"value\" data-value=\"secs\">11</span>\n    <span class=\"label\">Seconds</span>\n  </div>\n    <button class=\"timer-btn start\" data-action-continue>Продолжить отсчет</button>\n</div>\n`\n}","import './sass/main.scss';\n\nimport createMarkup from './js/markup';\n\nclass CountdownTimer {\n    constructor({ selector, targetDate }) {\n        this.intervalId = null;\n        this.selector = selector;\n        this.targetDate = targetDate;\n       \n        document.body.insertAdjacentHTML('afterbegin', createMarkup(selector));\n        this.container = document.getElementById(selector);\n        console.log(this.container)\n        this.start();\n        this.addListenersBtns();            \n    };\n  \n      start(){\n        this.intervalId = setInterval(() => {\n            const currentDate = Date.now();\n            const deltaTime = this.targetDate - currentDate;\n            const time = this.getTimeComponents(deltaTime);\n            console.log(`start`);\n    \n            this.updateInterface(time)\n        }, 1000); \n    }; \n\n     addListenersBtns() {\n        const stopBtn = this.container.querySelector('[data-action-stop]');\n        const continueBtn = this.container.querySelector('[data-action-continue]');\n        stopBtn.addEventListener('click', this.stop.bind(this));\n        continueBtn.addEventListener('click', this.start.bind(this));\n    };\n\n    updateInterface({ days, hours, mins, secs }) {\n            this.container.querySelector('[data-value=\"days\"]').textContent = days;\n            this.container.querySelector('[data-value=\"hours\"]').textContent = hours;\n            this.container.querySelector('[data-value=\"mins\"]').textContent = mins;\n            this.container.querySelector('[data-value=\"secs\"]').textContent = secs;\n    };\n\n    stop() {\n        clearInterval(this.intervalId);\n        console.log(\"Остановить\");\n        const timeToCount = this.getTimeComponents(0);\n        this.updateInterface(this.getTimeComponents(0));    \n    };\n    \n    getTimeComponents(time) {\n    const days = this.pad(Math.floor(time / (1000 * 60 * 60 * 24)));\n    const hours = this.pad(Math.floor((time % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)));\n    const mins = this.pad(Math.floor((time % (1000 * 60 * 60)) / (1000 * 60)));\n    const secs = this.pad(Math.floor((time % (1000 * 60)) / 1000));\n    return { days, hours, mins, secs };\n    };\n\n    pad(value) {\n    return String(value).padStart(2, '0');\n    };\n}\n\nconst timer = new CountdownTimer({\n  selector: '#timer-1',\n    targetDate: new Date('Oct 26, 2021'),\n});\n\nconst timerOne = new CountdownTimer({\n     selector: '#timer-2',\n    targetDate: new Date('Nov 26, 2021'),\n})\n"]}